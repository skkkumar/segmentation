<html>

<head>


<script type="text/javascript">



    function initfun(){

          document.onkeydown = checkKey;


    }


    function checkKey(e) {

        e = e || window.event;

        if (e.keyCode == '38') {
            // up arrow
        }
        else if (e.keyCode == '40') {
            // down arrow
        }
        else if (e.keyCode == '37') {
           // left arrow
           updateImage(-1);
        }
        else if (e.keyCode == '39') {
           // right arrow
           updateImage(1);
        }

    }


    function updateImage(incr) {
        var minframe = 1;
        var wrapmax = 50;

        var currentIndex = document.getElementById("frameno").value;
        //alert('frame = ' + currentIndex);

        //increment frame
        currentIndex = parseInt(currentIndex) + incr;
        //alert('currentIndex = ' + currentIndex);

        //apply wrap around
        if (currentIndex > wrapmax){
            currentIndex = 1;          
        } 
        if(currentIndex < 1){
            currentIndex = wrapmax;          
        }
        document.getElementById("frameno").value = currentIndex;

        var imageIndex = minframe +  currentIndex - 1;

        //update all the images
        document.getElementById("image1").src = "annotation/" + imageIndex + ".jpg";
        document.getElementById("image2").src = "disp/" + imageIndex + ".jpg";
        document.getElementById("image3").src = "left/" + imageIndex + ".jpg";
	document.getElementById("image4").src = "segment/" + imageIndex + ".jpg";

       // document.getElementById("demo").style.color = "red";
    }
</script> 


</head>


<body onload="initfun();">

<h1>Segmentation</h1>
<h2> - Sriram K. Kumar </h2>
<br>
<hr>

<br>
<br>
Problem : Earlier For segmentation. We quantized the image to a specific bin size and later segmented it in to equal bin size. This had a disadvantage that the objects was colored to be the at different depth (if the object is close / big). So, instead of seeing in equal sized bins, we convert into bin edges according to this distribution.
<br>
<br>

Steps:<br>
1) Compute the histogram of the depth image<br>
2) Normalize the image from 0 - 1.<br>
3) calculate the cumulative distibution of the histogram.<br>
4) On the cumulative distribution consider the depths at the splits 0.1, 0.2, 0.3, ... 1 (incase of 10 bins). Note : Most of the bin edges are located at far away points.<br>
5) Now, I use these bins for creating histogram and for segmentation. The result of this is shown below where you can notice tiger which will be the independent moving object to be detected as a complete depth. I even tested with objects closer (40cm).<br>

<hr>
Frame number : <input type="text" value="1" id="frameno"> <input type="button" onclick="updateImage(-1)" value="<"> <input type="button" onclick="updateImage(1)" value=">"><h4> Please use the Left and Right Arrow key on your keyboard to navigate.<h4>
<br>
Browse through the images with the navigation buttons. To straight away go to a specific frame, enter the frame number (1-50) and press the next button. 

<hr>


<table style="width:100%">
  <tr>
    <td>Left RGB image (Original)<br><img src="left/1.jpg" id="image3"></td>
    <td>Disparity<br><img src="disp/1.jpg" id="image2"></td> 
    <td>Annotation image<br><img src="annotation/1.jpg" id="image1"></td>
  </tr>
  <tr>
    <td>Segmentation<br><img src="segment/1.jpg" id="image4"></td>
  </tr>

</table>






</body>


</html>
